# nezcc file

extension          = hs

# type

Bool               = Bool
Byte               = Word8
Byte[]             = ByteString
Int                = Int
Int64              = Int64
Array              = (Ar.Vector (%s))
String             = String
Tree               = AST
structname         = %s

Some               = (Just (%s))
None               = Nothing
Option.isNone      = (isNothing (%s))
Option             = (Maybe (%s))
Option.get         = (fromJust (%s))

Int64->Int         = (fromIntegral (%s))
Int->Int64         = (fromIntegral (%s))
Byte->Int          = (fromIntegral (toInteger  (%s)))
String->Byte[]     = pack %s
Byte[]->String     = unpack %s

Array.new          = Ar.empty
Array.size         = (Ar.length %s)
Array.get          = (%s Ar.! %s)
Array.slice        = (Ar.slice %2$s (%3$s - %2$s + 1) %1$s)
const_array        = '''
%2$s :: Ar.Vector %1$s
%2$s = Ar.fromList %4$s
'''
#arraypair          = (%1$s,%2$s)
array              = [
arrays             = ,
end array          = ]


Byte[]''            = (C.pack "%s")
Byte[].quote        = "
Byte[].esc          = \x%02x
Byte[].get          = (%s `index` %s)
Byte[].slice        = ((take (%3$s - %2$s) . drop %2$s) (%1$s))

TreeList            = Ar.Vector AST
TreeList.empty      = Ar.empty
TreeList.cons       = ((%s, %s) `Ar.cons` %s)

MemoList          = Ar.Vector (%s)
MemoList.new      = Ar.empty
MemoList.get      = (%s Ar.! %s)

nezvalues         = nezsyms

# syntax

comment          = -- %s
begin            =
end              =
;                =

#module          = module $|base|(parse) where
#end module      =
struct           = data %1$s = %1$s {%2$s} deriving (Eq,Show)
record           = %2$s :: %1$s
records          = ,

object           = %1$s {%2$s}
objectparam      = %1$s = %2$s
objectparams     = , 

getter           = (%2$s %1$s)
setter           = S.put $ %1$s {%2$s = %3$s}

functype         = (%3$s -> S.State NezParserContext (%1$s))
functypeparam    = (%1$s)
functypeparams   = ->
return           = %s

const            = '''
%2$s :: %1$s
%2$s = %3$s
'''

function         = '''
%2$s :: %4$s
%2$s f%3$s = do
  px' <- S.get
'''

param    = %2$s
params   =

true             = True
false            = False
int              = (%s)

val              = let %2$s = %3$s
#let (%2$s :: %1$s) = %3$s
var              = let %2$s = %3$s
#let (%2$s :: %1$s) = %3$s
#assign          = let %s = %s
letin            = let %2$s = %3$s in %4$s

if               = if (%s) then
else if          = else if (%s) then
switch           = case (%s) of
case             = %s -> %s
default          = _ -> %s

and              = (%s) <&&> (%s)
or               = (%s) <||> (%s)
not              = (not (%s))
eq               = ((==) <$> %s <*> %s)
%                = %s `mod` %s

ifexpr           = ((%1$s) <?> (%2$s, %3$s))

funccall         = (%s %s)
arg              = (%s)
args             =

lambda           = (\%1$s -> %2$s)

#base64           = B("%s")
#bools            = B256("%s")

varname           = %s'


MEMOSIZE          = memoSize
MEMOS             = memos

TList             = [(String,AST)]
TList.empty       = []
TList.cons        = %s:%s

imports = '''
module XML(parseText) where
import Prelude hiding (length,log,take,drop)
import Data.Word
import qualified Data.ByteString.Char8 as C
import qualified Control.Monad.State as S
import Data.ByteString hiding (length,replicate)
import Data.Int
import Data.Maybe
import qualified Data.Vector as Ar
import qualified Data.IntMap as Map
import Control.Applicative

'''

ÔºÉNot reflected
def nezvalues = '''
nezvalues :: [ByteString]
nezvalues = fmap pack [data178, data179]
'''

libs = '''
(<&&>) :: S.State NezParserContext Bool -> S.State NezParserContext Bool -> S.State NezParserContext Bool
(<&&>) x y = (&&) <$> x <*> y

(<||>) :: S.State NezParserContext Bool -> S.State NezParserContext Bool -> S.State NezParserContext Bool
(<||>) x y = (||) <$> x <*> y

(<?>) :: S.State NezParserContext Bool-> (S.State NezParserContext a,S.State NezParserContext a)  -> S.State NezParserContext a
cond <?> (e1,e2) = do
  s0 <- S.get
  let (a1,s1) = S.runState cond s0
  if a1
    then S.put s1 >> e1
    else S.put s1 >> e2

data AST = Node String SubTree
         | Leaf String String
         deriving (Eq,Show)

--data SubTree = SubTree {sLabel :: String, sNode :: AST, sNext :: SubTree}
--             | Notree
--             deriving (Eq,Show)

type SubTree = Ar.Vector (String,AST)

'''


main = '''

'''

man = '''

'''

#def

setter2          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s}

setter3          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s}

setter4          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s, %8$s = %9$s}

setter5          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s, %8$s = %9$s, %10$s = %11$s}

def newMemos   = '''
newMemos tree' length' = Ar.replicate length' MemoEntry { key = -1, result = 0, mpos = 0, mtree = tree', mstate = Nothing}

'''

def storeM = '''
storeM :: ((NezParserContext)->(Int)->(Int)->(Bool) -> S.State (NezParserContext) Bool)
storeM fpx' memoPoint' pos' matched' = do
  px' <- S.get
  let (key',s1) = (S.runState (longkey (fromIntegral pos') memoPoint') px')
  let (m', s2) = (S.runState (getMemo px' key') s1)
  let oldmemo = memos s2
  S.put $ s2 {memos = rewriteList oldmemo (key' % 257) (m' {key = key', result = if matched' then 1 else 0, mpos = if matched' then pos s2 else pos', mtree = tree s2, mstate = (state s2)})}
  return (matched')
  where
    rewriteList xs i v = let k = fromIntegral i in Ar.update xs (Ar.singleton (k,v))

'''

def backpos = '''
backpos :: ((NezParserContext)->(Int) -> S.State (NezParserContext) Int)
backpos fpx' pos' = do
  px' <- S.get
  if ((headpos px') < pos') then
    S.put (px' {headpos = pos'}) >> return pos'
    else return (pos')

'''


def endT = '''
gettag :: ((Int) -> S.State (NezParserContext) (String))
gettag ntag' = nezsymbols Ar.! ntag'

getlabel :: ((Int) -> S.State (NezParserContext) (String))
getlabel nlabel' = nezsymbols Ar.! nlabel'

getval :: ((Int) -> S.State (NezParserContext) (ByteString))
getval nvalue' = nezvalues Ar.! nvalue'

getvalen :: ((Int) -> S.State (NezParserContext) (Int))
getvalen nvalue' = nezvaluesizes Ar.! nvalue'

recT :: ((NezParserContext)->(TreeLog)->(Int)->(Int)->(Int)->(SubTree) -> S.State (NezParserContext) AST)
recT fpx' tcur' ntag' nvalue' epos' subtrees' = do
  px' <- S.get
  if lop tcur' == 0
    then if nvalue' == 0
      then return $ newtree (nezsymbols Ar.! ntag') (inputs px') (lpos tcur') epos' subtrees'
      else return $ newtree (nezsymbols Ar.! ntag') (nezvalues Ar.! nvalue') 0 (nezvaluesizes Ar.! nvalue') subtrees'
    else recT px' (fromJust (lprev tcur')) (if (ntag' == (0) && (lop tcur') == (1)) then ((lpos tcur')) else (ntag')) (if (nvalue' == (0) && (lop tcur') == (2)) then ((lpos tcur')) else (nvalue')) epos' (if ((lop tcur') == (3)) then (nezsymbols Ar.! (lpos tcur'), (ltree tcur')) `Ar.cons` subtrees' else subtrees')

rLog :: ((TreeLog) -> S.State (NezParserContext) ((Maybe (TreeLog))))
rLog tcur' = do
  px' <- S.get
  if lop tcur' == 0
   then return (lprev tcur')
   else rLog (fromJust (lprev tcur'))

endT :: ((NezParserContext)->(Int)->(Int) -> S.State (NezParserContext) (Bool))
endT fpx' shift' ntag' = do
  px' <- S.get
  let (nTree,s1) = S.runState (recT px' (fromJust ((treeLog px'))) ntag' (0) ((pos px') + shift') Ar.empty) px'
  let (nTreeLog,s2) = S.runState (rLog (fromJust ((treeLog px')))) s1
  S.put $ s2 {tree = nTree, treeLog = nTreeLog}
  return (True)

'''

def parse = '''
parse :: (ByteString)->(Int) -> AST
parse inputs' length' = let tree' = newtree (Ar.head nezsymbols) inputs' 0 length' Ar.empty in
                        let px' = NezParserContext {inputs=inputs'
                             ,length=length'
                             ,pos=0
                             ,headpos=0
                             ,tree=tree'
                             ,treeLog=(Just (TreeLog {lop=0,lpos=0,ltree=tree',lprev=Nothing}))
                             ,state=Nothing
                             ,memos=(newMemos tree' 257)} in
                        let result = S.runState (e0 px') px' in
                        if Prelude.fst result then tree (Prelude.snd result) else newtree (Prelude.show nezerror) inputs' (headpos (Prelude.snd result)) length' Ar.empty

parseText :: String -> AST
parseText text' = let inputs' = (C.pack text') `C.snoc` '\NUL' in
                  let length' = C.length inputs' - 1 in
                  parse inputs' length'

newtree :: String -> ByteString -> Int -> Int -> SubTree -> AST
newtree tag inputs pos epos subs = if Ar.null subs
  then Leaf tag (C.unpack $ (C.drop pos (C.take epos inputs)))
  else Node tag subs

newMemos tree' length' = Ar.replicate length' MemoEntry { key = -1, result = 0, mpos = 0, mtree = tree', mstate = Nothing}

'''
